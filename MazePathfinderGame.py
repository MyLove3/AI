from queue import PriorityQueue
from collections import defaultdict
import random
import tkinter as tk
import time
from tkinter import messagebox

###########################################################################################################
# T·∫°o t·ª´ ƒëi·ªÉn c√°c k√Ω hi·ªáu
symbols = {'.': '‚¨ú',  # ƒê∆∞·ªùng ƒëi
           '#': '‚¨õ',  # T∆∞·ªùng
           'S': 'üë∏',  # Start
           'G': 'üéØ',  # Goal
           'W': 'üü•'}  # Way

###########################################################################################################
# kh·ªüi t·∫°o m√™ cung
maze = [['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
        ['#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '#', '.', '#', '#', '#', '.', '#', '#', '.', '#', '#', '.', '#', '.', '#', '.', '.', '#', '#'],
        ['#', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#'],
        ['#', '#', '.', '#', '#', '#', '.', '#', 'S', '#', '#', '#', '.', '#', '.', '#', '#', '#', '.', '#'],
        ['#', '#', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '#', '.', '.', '#'],
        ['#', '#', '.', '#', '#', '#', '#', '.', '#', '.', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#'],
        ['#', '#', '.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '#'],
        ['#', '#', '.', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '.', '#', '.', '#', '#'],
        ['#', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#', '#'],
        ['#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#'],
        ['#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#'],
        ['#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#'],
        ['#', '#', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '#'],
        ['#', '#', '#', '#', '.', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '#', '.', '#'],
        ['#', '#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#', '.', '.', '#'],
        ['#', '#', '.', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '.', '#', '.', '#', '#'],
        ['#', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#', '.', 'G', '#', '#'],
        ['#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#'],
        ['#', '#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#']]


 
    


###########################################################################################################
# V·∫Ω m√™ cung ban ƒë·∫ßu
def draw_maze(maze):
    print('M√™ cung ban ƒë·∫ßu:\n')
    for i in range(len(maze)):
        for j in range(len(maze[i])):
            if maze[i][j] == 'S':
                print(symbols['S'], end='')
            elif maze[i][j] == 'G':
                print(symbols['G'], end='')
            elif maze[i][j] == '.':
                print(symbols['.'], end='')
            else:
                print(symbols['#'], end='')
        print()
    print()


###########################################################################################################
# L·∫•y t·ªça ƒë·ªô start v√† goal
def get_start_and_goal(maze):
    start = None
    goal = None
    for i in range(len(maze)):
        for j in range(len(maze[i])):
            if maze[i][j] == 'S':
                print(f'Found start node at ({i}, {j})\n')
                start = (i, j)
            elif maze[i][j] == 'G':
                print(f'Found goal node at ({i}, {j})\n')
                goal = (i, j)
    return start, goal


###########################################################################################################
def heuristic(node, goal):
    return abs(node[0] - goal[0]) + abs(node[1] - goal[1])


###########################################################################################################
# C√°c h·∫±ng s·ªë
CELL_SIZE = 40
DELAY = 0.2

# H√†m v·∫Ω m√™ cung v·ªõi ƒë∆∞·ªùng ƒëi
def draw_maze_with_path(maze, path, total_cost):
    # T·∫°o c·ª≠a s·ªï tkinter
    window = tk.Tk()
    window.title("Maze Solver")
    canvas = tk.Canvas(window, width=len(maze[0]) * CELL_SIZE, height=len(maze) * CELL_SIZE)
    canvas.pack()

    # V·∫Ω m√™ cung ban ƒë·∫ßu
    for i in range(len(maze)):
        for j in range(len(maze[i])):
            x1 = j * CELL_SIZE
            y1 = i * CELL_SIZE
            x2 = x1 + CELL_SIZE
            y2 = y1 + CELL_SIZE

            if maze[i][j] == '#':
                canvas.create_rectangle(x1, y1, x2, y2, fill="black")
            elif maze[i][j] == 'S':
                canvas.create_rectangle(x1, y1, x2, y2, fill="green")
            elif maze[i][j] == 'G':
                canvas.create_rectangle(x1, y1, x2, y2, fill="red")
            else:
                canvas.create_rectangle(x1, y1, x2, y2, fill="white")

    # V·∫Ω ƒë∆∞·ªùng ƒëi
    for i in range(len(path) - 1):
        x1 = path[i][1] * CELL_SIZE + CELL_SIZE // 2
        y1 = path[i][0] * CELL_SIZE + CELL_SIZE // 2
        x2 = path[i+1][1] * CELL_SIZE + CELL_SIZE // 2
        y2 = path[i+1][0] * CELL_SIZE + CELL_SIZE // 2

        # Ki·ªÉm tra xem c√°c ph·∫ßn t·ª≠ trong ƒë∆∞·ªùng ƒëi c√≥ h·ª£p l·ªá hay kh√¥ng tr∆∞·ªõc khi v·∫Ω
        if 0 <= x1 < len(maze[0]) * CELL_SIZE and 0 <= y1 < len(maze) * CELL_SIZE and \
                0 <= x2 < len(maze[0]) * CELL_SIZE and 0 <= y2 < len(maze) * CELL_SIZE:
            canvas.create_line(x1, y1, x2, y2, fill="blue", width=2)

        window.update()
        time.sleep(DELAY)
    
    # Hi·ªÉn th·ªã t·ªïng chi ph√≠ s·ª≠ d·ª•ng message box
    messagebox.showinfo("T·ªïng chi ph√≠", "T·ªïng chi ph√≠: " + str(total_cost))

    # Hi·ªÉn th·ªã c·ª≠a s·ªï
    window.mainloop()

###########################################################################################################
def calculate_total_cost(path):
    total_cost = 0
    for i in range(len(path) - 1):
        current_node = path[i]
        next_node = path[i+1]
        # Gi·∫£ s·ª≠ chi ph√≠ gi·ªØa c√°c n√∫t k·ªÅ nhau l√† 1
        total_cost += 1
    return total_cost

###########################################################################################################

def a_star(maze, start, goal):
    # Gi·∫£i m√™ cung b·∫±ng thu·∫≠t to√°n A*
    # Tr·∫£ v·ªÅ ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t t·ª´ start ƒë·∫øn goal

    # T·∫°o m·ªôt set ƒë·ªÉ l∆∞u c√°c node ƒë√£ x√©t
    closed_set = set()

    # T·∫°o m·ªôt PriorityQueue ƒë·ªÉ l∆∞u c√°c node c·∫ßn x√©t
    open_set = PriorityQueue()

    # ƒê∆∞a node start v√†o open_set v·ªõi cost = 0 v√† priority = heuristic(start, goal)
    open_set.put((heuristic(start, goal), 0, start))

    # T·∫°o m·ªôt dictionary ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin v·ªÅ parent node v√† cost ƒë·∫øn node ƒë√≥
    came_from = {}
    cost_so_far = {}
    came_from[start] = None
    cost_so_far[start] = 0

    found_path = False  # Bi·∫øn ki·ªÉm tra xem ƒë√£ t√¨m th·∫•y ƒë∆∞·ªùng ƒëi hay ch∆∞a

    while not open_set.empty():
        # L·∫•y ra node c√≥ priority th·∫•p nh·∫•t trong open_set
        current = open_set.get()[2]
        if current == goal:
            # ƒê√£ t√¨m th·∫•y ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t t·ª´ start ƒë·∫øn goal
            found_path = True
            break

        # ƒê√°nh d·∫•u node hi·ªán t·∫°i l√† ƒë√£ x√©t
        closed_set.add(current)

        # Ki·ªÉm tra c√°c node l√¢n c·∫≠n c·ªßa node hi·ªán t·∫°i
        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            x, y = current[0] + dx, current[1] + dy
            if 0 <= x < len(maze) and 0 <= y < len(maze[0]) and maze[x][y] != '#':
                # T√≠nh to√°n cost t·ª´ start ƒë·∫øn node k·∫ø ti·∫øp
                new_cost = cost_so_far[current] + 1
                if (x, y) not in cost_so_far or new_cost < cost_so_far[(x, y)]:
                    # N·∫øu node ch∆∞a ƒë∆∞·ª£c x√©t ho·∫∑c cost m·ªõi nh·ªè h∆°n cost c≈©

                    # C·∫≠p nh·∫≠t th√¥ng tin cost v√† parent node c·ªßa node k·∫ø ti·∫øp
                    cost_so_far[(x, y)] = new_cost
                    came_from[(x, y)] = current

                    # T√≠nh to√°n priority c·ªßa node k·∫ø ti·∫øp v√† ƒë∆∞a v√†o open_set
                    priority = new_cost + heuristic((x, y), goal)
                    open_set.put((priority, new_cost, (x, y)))

                    # In ra th√¥ng tin c·ªßa node k·∫ø ti·∫øp n·∫øu ƒë√£ t√¨m th·∫•y ƒë∆∞·ªùng ƒëi
  
                    print(f'Node ({x}, {y}): cost={new_cost}, heuristic={heuristic((x, y), goal)}')
                    print()

    # T·∫°o ƒë∆∞·ªùng ƒëi t·ª´ start ƒë·∫øn goal
    if found_path:

        # In ra ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t n·∫øu t√¨m th·∫•y ƒë∆∞·ªùng
        path = []
        node = goal
        while node != start:
            path.append(node)
            node = came_from[node]
        path.append(start)
        path.reverse()
    path = []
    current = goal
    while current != start:
        path.append(current)
        if current in came_from:
            current = came_from[current]
            
        else:
            # Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng ƒëi t·ª´ start ƒë·∫øn goal
            print("Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng ƒëi t·ª´ start ƒë·∫øn goal.\n")
            draw_maze(maze)
            return []

    path.append(start)
    path.reverse()
    path_set = set(path)
    
    print("Vay duong di ngan nhat la: ")
    print("->".join(str(p) for p in path))
    print()


    # ƒê∆∞·ªùng ƒëi theo A*  
    draw_maze(maze) 
    print('ƒê∆∞·ªùng ƒëi theo A*:\n')
    for i, row in enumerate(maze):
        for j, col in enumerate(row):
            if (i,j) == start:
                print(symbols['S'], end='')  # K√Ω hi·ªáu node start
            elif (i, j) == goal:
                print(symbols['G'], end='')  # K√Ω hi·ªáu node goal
            elif (i, j) in path_set:
                print(symbols['W'], end='')  # K√Ω hi·ªáu ƒë∆∞·ªùng ƒë√£ ƒëi
            else:
                print(symbols[col], end='')
        print()
    return path

###########################################################################################################

def g_b_f_s(maze, start, goal):
    # T·∫°o m·ªôt set ƒë·ªÉ l∆∞u c√°c node ƒë√£ x√©t
    visited = set()

    # T·∫°o m·ªôt PriorityQueue ƒë·ªÉ l∆∞u c√°c node c·∫ßn x√©t
    open_set = PriorityQueue()

    # ƒê∆∞a node start v√†o open_set v·ªõi priority l√† heuristic(start, goal)
    open_set.put((heuristic(start, goal), start))

    # T·∫°o m·ªôt dictionary ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin v·ªÅ parent node v√† cost ƒë·∫øn node ƒë√≥
    came_from = {}
    came_from[start] = None

    while not open_set.empty():
        # L·∫•y ra node c√≥ priority th·∫•p nh·∫•t trong open_set
        current_priority, current = open_set.get()
        if current == goal:
            # ƒê√£ t√¨m th·∫•y ƒë∆∞·ªùng ƒëi t·ª´ start ƒë·∫øn goal
            break

        # ƒê√°nh d·∫•u node hi·ªán t·∫°i l√† ƒë√£ x√©t
        visited.add(current)

        # Ki·ªÉm tra c√°c node l√¢n c·∫≠n c·ªßa node hi·ªán t·∫°i
        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            x, y = current[0] + dx, current[1] + dy
            if 0 <= x < len(maze) and 0 <= y < len(maze[0]) and maze[x][y] != '#':
                neighbor = (x, y)
                if neighbor not in visited:
                    # C·∫≠p nh·∫≠t parent node c·ªßa node l√¢n c·∫≠n
                    came_from[neighbor] = current

                    # ƒê∆∞a node l√¢n c·∫≠n v√†o open_set v·ªõi priority l√† heuristic(neighbor, goal)
                    open_set.put((heuristic(neighbor, goal), neighbor))

    # T·∫°o ƒë∆∞·ªùng ƒëi t·ª´ start ƒë·∫øn goal
    path = []
    current = goal
    while current != start:
        path.append(current)
        current = came_from[current]

    path.append(start)
    path.reverse()
    return path


def ucs(maze, start, goal):
    # T·∫°o m·ªôt set ƒë·ªÉ l∆∞u c√°c node ƒë√£ x√©t
    visited = set()

    # T·∫°o m·ªôt PriorityQueue ƒë·ªÉ l∆∞u c√°c node c·∫ßn x√©t
    open_set = PriorityQueue()

    # ƒê∆∞a node start v√†o open_set v·ªõi cost l√† 0
    open_set.put((0, start))

    # T·∫°o m·ªôt dictionary ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin v·ªÅ parent node v√† cost ƒë·∫øn node ƒë√≥
    came_from = {}
    came_from[start] = None

    # T·∫°o m·ªôt dictionary ƒë·ªÉ l∆∞u tr·ªØ cost t·ª´ start ƒë·∫øn m·ªói node
    cost_so_far = {}
    cost_so_far[start] = 0

    while not open_set.empty():
        # L·∫•y ra node c√≥ cost th·∫•p nh·∫•t trong open_set
        current_cost, current = open_set.get()
        if current == goal:
            # ƒê√£ t√¨m th·∫•y ƒë∆∞·ªùng ƒëi t·ª´ start ƒë·∫øn goal
            break

        # ƒê√°nh d·∫•u node hi·ªán t·∫°i l√† ƒë√£ x√©t
        visited.add(current)

        # Ki·ªÉm tra c√°c node l√¢n c·∫≠n c·ªßa node hi·ªán t·∫°i
        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            x, y = current[0] + dx, current[1] + dy
            if 0 <= x < len(maze) and 0 <= y < len(maze[0]) and maze[x][y] != '#':
                neighbor = (x, y)
                # T√≠nh to√°n cost m·ªõi t·ª´ start ƒë·∫øn neighbor th√¥ng qua node hi·ªán t·∫°i
                new_cost = cost_so_far[current] + 1  # Gi·∫£ s·ª≠ cost gi·ªØa c√°c node l√† 1

                if neighbor not in cost_so_far or new_cost < cost_so_far[neighbor]:
                    # C·∫≠p nh·∫≠t parent node c·ªßa node l√¢n c·∫≠n
                    came_from[neighbor] = current

                    # C·∫≠p nh·∫≠t cost t·ª´ start ƒë·∫øn node l√¢n c·∫≠n
                    cost_so_far[neighbor] = new_cost

                    # ƒê∆∞a node l√¢n c·∫≠n v√†o open_set v·ªõi cost l√† new_cost
                    open_set.put((new_cost, neighbor))

    # T·∫°o ƒë∆∞·ªùng ƒëi t·ª´ start ƒë·∫øn goal
    path = []
    current = goal
    while current != start:
        path.append(current)
        current = came_from[current]

    path.append(start)
    path.reverse()
    return path


def bfs(maze, start, goal):
    # T·∫°o m·ªôt h√†ng ƒë·ª£i (queue) ƒë·ªÉ l∆∞u c√°c node c·∫ßn x√©t
    queue = []

    # ƒê∆∞a node start v√†o h√†ng ƒë·ª£i
    queue.append(start)

    # T·∫°o m·ªôt set ƒë·ªÉ l∆∞u c√°c node ƒë√£ x√©t
    visited = set()

    # T·∫°o m·ªôt dictionary ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin v·ªÅ parent node
    came_from = {}
    came_from[start] = None

    while queue:
        # L·∫•y ra node ƒë·∫ßu ti√™n trong h√†ng ƒë·ª£i
        current = queue.pop(0)
        if current == goal:
            # ƒê√£ t√¨m th·∫•y ƒë∆∞·ªùng ƒëi t·ª´ start ƒë·∫øn goal
            break

        # ƒê√°nh d·∫•u node hi·ªán t·∫°i l√† ƒë√£ x√©t
        visited.add(current)

        # Ki·ªÉm tra c√°c node l√¢n c·∫≠n c·ªßa node hi·ªán t·∫°i
        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            x, y = current[0] + dx, current[1] + dy
            if 0 <= x < len(maze) and 0 <= y < len(maze[0]) and maze[x][y] != '#':
                neighbor = (x, y)
                if neighbor not in visited and neighbor not in queue:
                    # ƒê∆∞a node l√¢n c·∫≠n v√†o h√†ng ƒë·ª£i
                    queue.append(neighbor)

                    # C·∫≠p nh·∫≠t parent node c·ªßa node l√¢n c·∫≠n
                    came_from[neighbor] = current

    # T·∫°o ƒë∆∞·ªùng ƒëi t·ª´ start ƒë·∫øn goal
    path = []
    current = goal
    while current != start:
        path.append(current)
        current = came_from[current]

    path.append(start)
    path.reverse()
    return path


def dfs(maze, start, goal):
    # T·∫°o m·ªôt stack ƒë·ªÉ l∆∞u tr·ªØ c√°c node c·∫ßn x√©t
    stack = []

    # ƒê∆∞a node start v√†o stack
    stack.append(start)

    # T·∫°o m·ªôt set ƒë·ªÉ l∆∞u tr·ªØ c√°c node ƒë√£ x√©t
    visited = set()

    # T·∫°o m·ªôt dictionary ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin v·ªÅ parent node
    came_from = {}
    came_from[start] = None

    while stack:
        # L·∫•y ra node tr√™n c√πng c·ªßa stack
        current = stack.pop()
        if current == goal:
            # ƒê√£ t√¨m th·∫•y ƒë∆∞·ªùng ƒëi t·ª´ start ƒë·∫øn goal
            break

        # ƒê√°nh d·∫•u node hi·ªán t·∫°i l√† ƒë√£ x√©t
        visited.add(current)

        # Ki·ªÉm tra c√°c node l√¢n c·∫≠n c·ªßa node hi·ªán t·∫°i
        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            x, y = current[0] + dx, current[1] + dy
            if 0 <= x < len(maze) and 0 <= y < len(maze[0]) and maze[x][y] != '#':
                neighbor = (x, y)
                if neighbor not in visited and neighbor not in stack:
                    # ƒê∆∞a node l√¢n c·∫≠n v√†o stack
                    stack.append(neighbor)

                    # C·∫≠p nh·∫≠t parent node c·ªßa node l√¢n c·∫≠n
                    came_from[neighbor] = current

    # T·∫°o ƒë∆∞·ªùng ƒëi t·ª´ start ƒë·∫øn goal
    path = []
    current = goal
    while current != start:
        path.append(current)
        current = came_from[current]

    path.append(start)
    path.reverse()
    return path




def create_game_window(maze, solve_func, exit_func):
    # T·∫°o c·ª≠a s·ªï giao di·ªán
    root = tk.Tk()
    root.title("MazePathfinderGame")

    # T·∫°o canvas ƒë·ªÉ v·∫Ω m√™ cung
    canvas = tk.Canvas(root, width=len(maze[0]) * CELL_SIZE, height=len(maze) * CELL_SIZE)
    canvas.pack()

    # Th√™m n√∫t "Solve Maze"
    solve_button = tk.Button(root, text="Ch·∫°y m√™ cung", command=solve_func)
    solve_button.pack()

    # Th√™m n√∫t "Exit"
    exit_button = tk.Button(root, text="Tho√°t", command=exit_func)
    exit_button.pack()

    # Hi·ªÉn th·ªã c·ª≠a s·ªï
    root.mainloop()


def exit_game():
    root.quit()





